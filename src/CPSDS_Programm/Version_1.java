
package CPSDS_Programm;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static com.googlecode.javacv.cpp.opencv_highgui.*;
import static com.googlecode.javacv.cpp.opencv_core.IPL_DEPTH_8U;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import static com.googlecode.javacv.cpp.opencv_core.cvCreateImage;
import static com.googlecode.javacv.cpp.opencv_core.cvGetSize;
import com.googlecode.javacv.cpp.opencv_highgui;
import static com.googlecode.javacv.cpp.opencv_imgproc.CV_BGR2GRAY;
import static com.googlecode.javacv.cpp.opencv_imgproc.cvCvtColor;
import com.googlecode.javacv.cpp.videoInputLib.videoInput;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.InputStream;
import static java.lang.Thread.sleep;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter; 

/**
 *
 * @author Sherwan
 * 
 */
public class Version_1 extends javax.swing.JFrame {
    
    
    
    int[] SECONDS_TO_CHECK = new int[6];    
    boolean[] IS_CAR_IN_PARK_n = new boolean[6];  
    
    JCheckBoxMenuItem[] Dont_Capture = new JCheckBoxMenuItem[6];
    // to get the Jlabels from ( Space Detector ) tab
    JLabel[] PARK_LABEL = new JLabel[6];
    
    // get the Jlabels from ( Croped Image ) tab
    JLabel[] PART = new JLabel[6];
    
    // get the Jlabels from ( Croped Image ) tab, which are created to show time.
    JLabel[] TIME_LABELs = new JLabel[6];
    
    // get the time, when the camera is entered and when it leavs
    String[] DATE_AND_TIME = new String[6];
    
    //The main programm icon
    ImageIcon PROGRAMM_ICON = new ImageIcon("camera-icon.png");
    
    // create an array to check how many place are available, and then save the number of availabel park in
    // NUM_OF_AVAILABLE_PARK
    int[] availabl = new int[6]; 
    int NUM_OF_AVAILABLE_PARK = 0;
    
    boolean IS_FIRST_TIME = true;
    
    double[] SIMIULARITY_BETWEEN_TWO_IMAGES = new double[6];
    
    String s1, s2, s3, s4, s5, s6;                    
    double PERCENT=0.20;  
    int sec_for_all = 3;
    
    startSimilarity StartDetect = new startSimilarity();    
    JTextArea ta = new JTextArea();

    
    
    //Constructer
    public Version_1() {
        initComponents();
        
     
     TIME_LABELs[0] =  TIME_LABEL_1;    TIME_LABELs[1] =  TIME_LABEL_2;   TIME_LABELs[2] =  TIME_LABEL_3;
     TIME_LABELs[3] =  TIME_LABEL_4;    TIME_LABELs[4] =  TIME_LABEL_5;   TIME_LABELs[5] =  TIME_LABEL_6;
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        min = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        imagesaving = new javax.swing.ButtonGroup();
        pupm2 = new javax.swing.JPopupMenu();
        pupm2i1 = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        part2 = new javax.swing.JLabel();
        part3 = new javax.swing.JLabel();
        part1 = new javax.swing.JLabel();
        part4 = new javax.swing.JLabel();
        part5 = new javax.swing.JLabel();
        part6 = new javax.swing.JLabel();
        SpaceDetector = new javax.swing.JPanel();
        park1 = new javax.swing.JLabel();
        park2 = new javax.swing.JLabel();
        park3 = new javax.swing.JLabel();
        park4 = new javax.swing.JLabel();
        TIME_LABEL_1 = new javax.swing.JLabel();
        TIME_LABEL_2 = new javax.swing.JLabel();
        TIME_LABEL_3 = new javax.swing.JLabel();
        TIME_LABEL_4 = new javax.swing.JLabel();
        park6 = new javax.swing.JLabel();
        park5 = new javax.swing.JLabel();
        TIME_LABEL_6 = new javax.swing.JLabel();
        TIME_LABEL_5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        menimoze = new javax.swing.JButton();
        Start_and_Stop_BT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        imgExt = new javax.swing.JComboBox();
        clock = new javax.swing.JLabel();
        captureImageButton = new javax.swing.JButton();
        Exit_BTN = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        availablPark = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        iExit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        Dontp1 = new javax.swing.JCheckBoxMenuItem();
        Dontp2 = new javax.swing.JCheckBoxMenuItem();
        Dontp3 = new javax.swing.JCheckBoxMenuItem();
        Dontp4 = new javax.swing.JCheckBoxMenuItem();
        Dontp5 = new javax.swing.JCheckBoxMenuItem();
        Dontp6 = new javax.swing.JCheckBoxMenuItem();
        jMenu6 = new javax.swing.JMenu();
        defaultLoc = new javax.swing.JRadioButtonMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        askme = new javax.swing.JRadioButtonMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();

        min.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        min.setText("Menimize");
        min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minActionPerformed(evt);
            }
        });
        jPopupMenu1.add(min);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        jMenuItem4.setText("Close");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        pupm2i1.setText("Save Image");
        pupm2i1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pupm2i1ActionPerformed(evt);
            }
        });
        pupm2.add(pupm2i1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parking SpaceDetection");
        setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        part2.setBackground(new java.awt.Color(0, 153, 153));
        part2.setOpaque(true);
        jPanel2.add(part2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 321, 161));

        part3.setBackground(new java.awt.Color(0, 204, 204));
        part3.setOpaque(true);
        jPanel2.add(part3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 321, 161));

        part1.setBackground(new java.awt.Color(102, 204, 255));
        part1.setOpaque(true);
        jPanel2.add(part1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 321, 161));

        part4.setBackground(new java.awt.Color(0, 51, 102));
        part4.setOpaque(true);
        jPanel2.add(part4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 321, 161));

        part5.setBackground(new java.awt.Color(51, 255, 153));
        part5.setOpaque(true);
        jPanel2.add(part5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 320, 161));

        part6.setBackground(new java.awt.Color(51, 51, 255));
        part6.setOpaque(true);
        jPanel2.add(part6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 320, 161));

        jTabbedPane1.addTab("Croped Image", jPanel2);

        SpaceDetector.setBackground(new java.awt.Color(0, 51, 102));
        SpaceDetector.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        park1.setBackground(new java.awt.Color(255, 255, 255));
        park1.setFont(park1.getFont().deriveFont(park1.getFont().getStyle() | java.awt.Font.BOLD, park1.getFont().getSize()+73));
        park1.setText("   1");
        park1.setOpaque(true);
        SpaceDetector.add(park1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 213, 100));

        park2.setBackground(new java.awt.Color(255, 255, 255));
        park2.setFont(park2.getFont().deriveFont(park2.getFont().getStyle() | java.awt.Font.BOLD, park2.getFont().getSize()+84));
        park2.setText("   2");
        park2.setOpaque(true);
        SpaceDetector.add(park2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, 213, 100));

        park3.setBackground(new java.awt.Color(255, 255, 255));
        park3.setFont(park3.getFont().deriveFont(park3.getFont().getStyle() | java.awt.Font.BOLD, park3.getFont().getSize()+84));
        park3.setText("   3");
        park3.setOpaque(true);
        SpaceDetector.add(park3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 213, 100));

        park4.setBackground(new java.awt.Color(255, 255, 255));
        park4.setFont(park4.getFont().deriveFont(park4.getFont().getStyle() | java.awt.Font.BOLD, park4.getFont().getSize()+84));
        park4.setText("   4");
        park4.setOpaque(true);
        SpaceDetector.add(park4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, 213, 100));

        TIME_LABEL_1.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_1.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 137, 25));

        TIME_LABEL_2.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_2.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 137, 25));

        TIME_LABEL_3.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_3.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 138, 28));

        TIME_LABEL_4.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_4.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 280, 128, 30));

        park6.setBackground(new java.awt.Color(255, 255, 255));
        park6.setFont(new java.awt.Font("Tahoma", 1, 95)); // NOI18N
        park6.setText("   6");
        park6.setOpaque(true);
        SpaceDetector.add(park6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 320, 213, 100));

        park5.setBackground(new java.awt.Color(255, 255, 255));
        park5.setFont(new java.awt.Font("Tahoma", 1, 95)); // NOI18N
        park5.setText("   5");
        park5.setOpaque(true);
        SpaceDetector.add(park5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 320, 213, 100));

        TIME_LABEL_6.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_6.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 420, 130, 30));

        TIME_LABEL_5.setBackground(new java.awt.Color(204, 204, 255));
        TIME_LABEL_5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TIME_LABEL_5.setOpaque(true);
        SpaceDetector.add(TIME_LABEL_5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, 130, 30));

        jTabbedPane1.addTab("Space Detector", SpaceDetector);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 550));

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menimoze.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        menimoze.setText("-");
        menimoze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menimozeActionPerformed(evt);
            }
        });
        jPanel3.add(menimoze, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 3, -1, 28));

        Start_and_Stop_BT.setBackground(new java.awt.Color(51, 153, 255));
        Start_and_Stop_BT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Start_and_Stop_BT.setText("Start");
        Start_and_Stop_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Start_and_Stop_BTActionPerformed(evt);
            }
        });
        jPanel3.add(Start_and_Stop_BT, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 49, 130, 59));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Picture Format:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 126, 111, 29));

        imgExt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        imgExt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPEG", "BMP", "PNG" }));
        jPanel3.add(imgExt, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 161, 130, -1));

        clock.setBackground(new java.awt.Color(102, 204, 255));
        clock.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        clock.setText("Clock");
        clock.setOpaque(true);
        jPanel3.add(clock, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 126, 29));

        captureImageButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        captureImageButton.setText("Capture Img");
        captureImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureImageButtonActionPerformed(evt);
            }
        });
        jPanel3.add(captureImageButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 190, 130, 38));

        Exit_BTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Exit_BTN.setForeground(new java.awt.Color(255, 0, 0));
        Exit_BTN.setText("Exit");
        Exit_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_BTNActionPerformed(evt);
            }
        });
        jPanel3.add(Exit_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 3, 57, 28));
        jPanel3.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 35, 126, 10));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Avilable Park:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 120, 30));

        availablPark.setBackground(new java.awt.Color(0, 153, 255));
        availablPark.setFont(new java.awt.Font("Tahoma", 1, 95)); // NOI18N
        availablPark.setForeground(new java.awt.Color(255, 255, 255));
        availablPark.setText(" ?");
        availablPark.setToolTipText("");
        availablPark.setOpaque(true);
        jPanel3.add(availablPark, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 120, 110));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, 150, 550));

        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setComponentPopupMenu(jPopupMenu1);
        jMenuBar1.setName(""); // NOI18N

        jMenu1.setText("File");

        iExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        iExit.setText("Exit");
        iExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iExitActionPerformed(evt);
            }
        });
        jMenu1.add(iExit);
        jMenu1.add(jSeparator1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu3.setText("Dont Capture:");

        Dontp1.setText("Park1");
        Dontp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp1ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp1);

        Dontp2.setText("Park2");
        Dontp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp2ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp2);

        Dontp3.setText("Park3");
        Dontp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp3ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp3);

        Dontp4.setText("Park4");
        Dontp4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp4ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp4);

        Dontp5.setText("Park5");
        Dontp5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp5ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp5);

        Dontp6.setText("Park6");
        Dontp6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dontp6ActionPerformed(evt);
            }
        });
        jMenu3.add(Dontp6);

        jMenu2.add(jMenu3);

        jMenu6.setText(" Saving Image:");

        imagesaving.add(defaultLoc);
        defaultLoc.setSelected(true);
        defaultLoc.setText(" Default Location");
        jMenu6.add(defaultLoc);
        jMenu6.add(jSeparator3);

        imagesaving.add(askme);
        askme.setText("Ask me where to save");
        jMenu6.add(askme);
        jMenu6.add(jSeparator4);

        jMenu2.add(jMenu6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
  /*
    This class is created to get the image form the park_labels and send them to Similarity.java class,
    which converts image to two dimensional array, and then returns the precentage of the similarty between two images,
    the realtime taken image, and the image where the park was empty. And then it shows these values 
    on the designed GUI.
    */
    public class startSimilarity implements Runnable {

        final Similarity similarity = new Similarity();
        boolean IS_CAMERA_RUNNING = false;        
        
        // this arrays get the array of images, where the park was empty, and are inithialized only one time 
        // at the beginning of the program 
        int[][] _a = new int[6][320*160];
        
        // this arrays get the array of images, and there values are updated every 3 seconds, and compared to 
        // _a array
        int[][] _b = new int[6][320*160];
        
        //create to get the images from JLabels of ( Croped Image ) tab
        Icon[] icons = new Icon[6];         
        
        @Override
        public void run() {
                
                Dont_Capture[0] =Dontp1; Dont_Capture[1] =Dontp2; Dont_Capture[2] =Dontp3;
                Dont_Capture[3] =Dontp4; Dont_Capture[4] =Dontp5; Dont_Capture[5] =Dontp6; 
                
                PARK_LABEL[0] = park1; PARK_LABEL[1] = park2; PARK_LABEL[2] = park3;
                PARK_LABEL[3] = park4; PARK_LABEL[4] = park5; PARK_LABEL[5] = park6;
 
                PART[0] = part1; PART[1] = part2; PART[2] = part3;
                PART[3] = part4; PART[4] = part5; PART[5] = part6;
                            
            while (IS_CAMERA_RUNNING) {
                try {
                    
                BufferedImage BF[] = new BufferedImage[6];
                
                // gets the values of Simiularity betweeen each part of the park
                for(int i = 0; i<6; i++)
                    {
                        icons[i] = PART[i].getIcon();
                        if(icons[i] != null)  { 
                            BF[i] = new BufferedImage(icons[i].getIconWidth(), icons[i].getIconHeight(), BufferedImage.TYPE_INT_RGB);
                            icons[i].paintIcon(null, BF[i].getGraphics(), 0, 0);
                            
                            if (IS_FIRST_TIME) 
                            { 
                                ImageIO.write(BF[i], "jpg", new File("Part"+(i+1)+".jpg"));
                                _a[i]= similarity.getMYRGB(BF[i]);
                                if(i  == 5)
                                { 
                                    ImageIO.write(webcam.grayimg.getBufferedImage(), "jpg", new File("first.jpg")); 
                                    IS_FIRST_TIME = false;
                                }
                                
                            }

                            _b[i] = similarity.getMYRGB(BF[i]);
                            SIMIULARITY_BETWEEN_TWO_IMAGES[i] = similarity.SSIM(_a[i], _b[i]);     
                        } 
                        
                    }            
                    
                
                // shows the values of the changes were made, if any.
                    for(int i = 0; i<6 ; i++){
                        if(!Dont_Capture[i].isSelected())
                        {
                          if (SIMIULARITY_BETWEEN_TWO_IMAGES[i] < PERCENT) {// if the simiularity less than 20%, that means there is a car in park
                            if (SECONDS_TO_CHECK[i] == 3) 
                            { 
                                availabl[i] = 0;
                                PARK_LABEL[i].setBackground(Color.red);
                                
                                    if ( IS_CAR_IN_PARK_n[i] == false ) 
                                        DATE_AND_TIME[i] = calendar();
                                
                                    setTime(1, DATE_AND_TIME[i], i);
                                    IS_CAR_IN_PARK_n[i] = true;
                                
                                } 
                                    else 
                                        SECONDS_TO_CHECK[i]++;
                            
                            } 
                          
                          else 
                          
                            {
                                availabl[i] = 1; 
                                SECONDS_TO_CHECK[i] = 0;
                                PARK_LABEL[i].setBackground(Color.WHITE);
                                setTime(0, DATE_AND_TIME[i], i);
                                IS_CAR_IN_PARK_n[i] = false;
                            } 
                         }
                        else 
                            availabl[i] = 0;  
                            
                    }
                    
                    // count the nummber of available parks
                    for (int i = 0; i < 6; i++) 
                        NUM_OF_AVAILABLE_PARK += availabl[i];
                      
                    // show the value of the availabel parks
                    availablPark.setText(String.valueOf(" " + NUM_OF_AVAILABLE_PARK));
                                        
                    NUM_OF_AVAILABLE_PARK = 0;
                    
                    s1 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[0]);
                    s2 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[1]);
                    s3 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[2]);
                    s4 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[3]);
                    s5 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[4]);
                    s6 = String.valueOf(SIMIULARITY_BETWEEN_TWO_IMAGES[5]);
                    System.out.println(s1 + "  " + s2 + "  " + s3 + "  " + s4 + "  " + s5 + "  " + s6); 
                    
                    // repeat this all 3 seconds, i.e the programm will check all three minutes if any change were made.
                    sleep(3000);
                    
                } catch (InterruptedException ex) {
                    System.out.println(ex.getMessage());
                } catch (IOException ex) {
                    Logger.getLogger(main_class.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

 
        public void start() {
            canParkBeCaptured();
            new Thread(this).start(); 
            IS_CAMERA_RUNNING = true;
        }

 
        public void stop() { 
            IS_CAMERA_RUNNING = false;
            setDefaultValues();
            
        }
    };
    
    
    // check if the part of the park can be captured
    public void canParkBeCaptured(){
                    if(Dontp1.isSelected()){park1.setBackground(Color.red);TIME_LABEL_1.setText("Unknown");}
                    if(Dontp2.isSelected()){park2.setBackground(Color.red);TIME_LABEL_2.setText("Unknown");}
                    if(Dontp3.isSelected()){park3.setBackground(Color.red);TIME_LABEL_3.setText("Unknown");}
                    if(Dontp4.isSelected()){park4.setBackground(Color.red);TIME_LABEL_4.setText("Unknown");}
                    if(Dontp5.isSelected()){park5.setBackground(Color.red);TIME_LABEL_5.setText("Unknown");}
                    if(Dontp6.isSelected()){park6.setBackground(Color.red);TIME_LABEL_6.setText("Unknown");} 
    }
    
    // set deafult values to park parts and the time labels, if the programm is stoped 
    public void setDefaultValues(){
            park1.setBackground(Color.white);TIME_LABEL_1.setText("");
            park2.setBackground(Color.white);TIME_LABEL_2.setText("");
            park3.setBackground(Color.white);TIME_LABEL_3.setText("");
            park4.setBackground(Color.white);TIME_LABEL_4.setText("");
            park5.setBackground(Color.white);TIME_LABEL_5.setText("");
            park6.setBackground(Color.white);TIME_LABEL_6.setText("");
            park5.setBackground(Color.white);TIME_LABEL_5.setText("");  
    }
    
    
    // end of startSimilarity class and the functions related to this class.
    
/*
    Webcam class, this class is created to access the webcam and show the resulte on the GUI.
*/
    public class Webcam implements Runnable {

        boolean IS_CAMERA_RUNNING = false;
        CvCapture capture;
        IplImage grabbedimag, grayimg; 
        
        @Override
        public void run() {  
            
            // from here 
                grabbedimag = opencv_highgui.cvQueryFrame(capture); 
                grayimg = cvCreateImage(cvGetSize(grabbedimag), IPL_DEPTH_8U, 1);
                cvCvtColor(grabbedimag, grayimg, CV_BGR2GRAY);
            // to here, accessing webcam
                
            // as long as the programm is running take the realtime image from the webcam and show it on GUI
                while (((opencv_highgui.cvQueryFrame(capture)) != null) && (IS_CAMERA_RUNNING == true)) {

                    cvCvtColor(grabbedimag, grayimg, CV_BGR2GRAY); 
                    if (!Dontp1.isSelected()) {
                        part1.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(0, 0, 320, 160)));//(x,y,w,h)
                    }
                    if (!Dontp2.isSelected()) {
                        part2.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(320, 0, 320, 160)));//(x,y,w,h)
                    }
                    if (!Dontp3.isSelected()) {
                        part3.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(0, 160, 320, 160)));//(x,y,w,h)
                    }
                    if (!Dontp4.isSelected()) {
                        part4.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(320, 160, 320, 160)));
                    }
                    if (!Dontp5.isSelected()) {
                        part5.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(0, 320, 320, 160)));
                    }
                    if (!Dontp6.isSelected()) {
                        part6.setIcon(new ImageIcon(grayimg.getBufferedImage().getSubimage(320, 320, 320, 160)));
                    }

                } 

        }; 


        public void start() { 
            new Thread(this).start(); 
            IS_CAMERA_RUNNING = true;
        }
         

        public void stop() { 
            IS_CAMERA_RUNNING = false; 
            cvReleaseCapture(capture);
            
        }
    };
    
   
// end of webcam class
    
    
     
    int movX = 0;
    int movY = 0;

    // we call this function whenever we need to get the current time 
    public String calendar() {
        Calendar cal = new GregorianCalendar();
        int h = cal.get(Calendar.HOUR);
        int m = cal.get(Calendar.MINUTE);
        int s = cal.get(Calendar.SECOND);
        String all = null;

        all = h < 10 ? String.valueOf("0" + h) : String.valueOf(h);
        all = m < 10 ? all.concat(String.valueOf(":0" + m)) : all.concat(String.valueOf(":" + m));
        all = s < 10 ? all.concat(String.valueOf(":0" + s)) : all.concat(String.valueOf(":" + s));

        return all;
    }
    
    Font f1 = new Font("Arial", Font.BOLD, 15);


    // shows time on some part of GUI
    public void setTime(int tf, String s, int NUMBER_OF_PARK) {
        
        if(tf == 1)
            {   
                TIME_LABELs[NUMBER_OF_PARK].setForeground(Color.black);
                TIME_LABELs[NUMBER_OF_PARK].setText(s);
            }
        else
        {
            TIME_LABELs[NUMBER_OF_PARK].setText(s);
            TIME_LABELs[NUMBER_OF_PARK].setForeground(Color.red);
        }
    }
 
     public void initializeSomeVariables(){
        webcam = new Webcam();   
        }   
     
 
    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        setOpacity(0.5f);
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        setOpacity(1.0f);   
    }//GEN-LAST:event_formWindowGainedFocus

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered

    }//GEN-LAST:event_formMouseEntered

    // moves the form when the user drags an element
    void draged(java.awt.event.MouseEvent evt) {
        int fx = getX();
        int fy = getY();
        int ex = evt.getX();
        int ey = evt.getY();
        int tx = ((ex - movX));
        int ty = ((ey - movY));
        setLocation((fx + tx), (fy + ty));
        setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    }

    void moved(java.awt.event.MouseEvent evt) {
        movX = evt.getX();
        movY = evt.getY();
    }

    void _3DExit() {
        int x = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to exit?", "", 
                                               JOptionPane.YES_NO_CANCEL_OPTION);
        if (x == 0) {
            for (int i = 0; i < 32; i++) {
                if (i == 31) {
                    try{
                    if(webcam != null)
                        {
                            webcam.stop();
                            cvReleaseCapture(webcam.capture);
                       }
                            tim.stop(); 
                    }
                    catch(Exception ex){ System.out.println("Opss");}
                    finally{
                            System.exit(0);
                    }                   
                }
                setSize(getWidth() - 20, getHeight() - 15);
                setLocation(getLocation().x + 6, getLocation().y + 6);
                try {
                    Thread.sleep(15);//sleep(1);
                } catch (InterruptedException ex) {
                    Logger.getLogger(main_class.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } 
    }

    
    
    private void iExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iExitActionPerformed
        
    _3DExit();
        
    }//GEN-LAST:event_iExitActionPerformed

    Webcam webcam; 
    boolean FIRST_TIME = true;

    // This function is created to make the programm wait until the camera is initialiezed and turned on properly
    public void initializeCamera() throws Exception{         
        Thread test = new Thread(){
            @Override
            public void run(){
        try{
                        webcam.capture = opencv_highgui.cvCreateCameraCapture(1);
                        while(opencv_highgui.cvQueryFrame(webcam.capture) == null)
                         { 
                            sleep(100);
                        } 
                    } 
                catch (InterruptedException e){}
            }
        };
          
        test.start();
        test.join();
             
    }
    
    private void Start_and_Stop_BTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Start_and_Stop_BTActionPerformed
               
       String s= Start_and_Stop_BT.getText();
       Icon delicon = new ImageIcon("none.jpg");      
       
       if(videoInput.listDevices()>=1) // check if the device has any connected camera
       {         
        if (s.equals("Start")) 
         {   
            try{initializeCamera();}// wait until the camera starts up
            catch(Exception ex){
                System.out.println("an error has occurred during startup, "
                        + "please check if your camera is connected properly.");
            }  
                
            webcam.start();
            Start_and_Stop_BT.setBackground(Color.red);
            Start_and_Stop_BT.setText("Stop");
            
            for(int i=0;i<6;i++)    
                availabl[i]=1;            
            
            StartDetect.start();
        } 
        else {
            
            int CLOSE_THE_PROGRAMM = JOptionPane.showConfirmDialog(rootPane, 
                                                  "Are you sure you want to Stop process?",
                                                  "",
                                                  JOptionPane.YES_NO_CANCEL_OPTION);
           if(CLOSE_THE_PROGRAMM == 0) 
           {
                StartDetect.stop();
                  
                for(int i=0;i<6;i++)availabl[i]=0;
                 
                availablPark.setText(String.valueOf(" ?"));

                part1.setIcon(delicon);part2.setIcon(delicon);part3.setIcon(delicon);
                part4.setIcon(delicon);part5.setIcon(delicon);part6.setIcon(delicon);
                
                webcam.stop(); 
                Start_and_Stop_BT.setBackground(blue);
                Start_and_Stop_BT.setText("Start");
            }
        }
        
       }
       else
       {
           JOptionPane.showMessageDialog(rootPane, "No camera is found!\n Please check if your camera is connected correctly.", "Error Message", JOptionPane.OK_CANCEL_OPTION);
       }
       
       
    }//GEN-LAST:event_Start_and_Stop_BTActionPerformed
    
    Color blue;
    Thread tim;    

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        initializeSomeVariables();
          
        Object[] ob = {jPanel2, jPanel3, jMenuBar1, jTabbedPane1, SpaceDetector}; 
        for (int i = 0; i < ob.length; i++) {
            JComponent temp = (JComponent) ob[i];
            temp.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                @Override
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    draged(evt);
                }

                @Override
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    moved(evt);
                }
            });

            temp.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            });
        }
        
        setIconImage(PROGRAMM_ICON.getImage());
        blue = Start_and_Stop_BT.getBackground();
        
        // show current time and update it
        tim = new Thread() {
            @Override
            public void run() {
                for (;;) {
                    clock.setText("   " + calendar());
                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Version_1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        
        tim.start();

    }//GEN-LAST:event_formWindowOpened

    private void menimozeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menimozeActionPerformed
        setState(JFrame.ICONIFIED);         
    }//GEN-LAST:event_menimozeActionPerformed

    private void minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minActionPerformed
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_minActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        _3DExit();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void Exit_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_BTNActionPerformed
        
        _3DExit();
        
    }//GEN-LAST:event_Exit_BTNActionPerformed
    

// when the user wants to save an image of a park
    public void saveimage(Icon icon) {
        String cal = calendar();

        BufferedImage image = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        
        icon.paintIcon(null, image.getGraphics(), 0, 0);
        if (askme.isSelected()) {
            ta.setText("");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "PNG", "JPEG", "JPG", "GIF", "BMP");
            String[] tring = new String[100];
            String last = null;
            char temp;

            JFileChooser fc = new JFileChooser();
            fc.addChoosableFileFilter(filter);
            int a = fc.showSaveDialog(null);
            String fname = fc.getSelectedFile().getName();
            
            if (a == JFileChooser.APPROVE_OPTION) {
                File dir = fc.getCurrentDirectory();
                String str_dir = dir.toString();
                //Correct path>>>>>>>>
                for (int i = 0; i < str_dir.length(); i++) {
                    if (str_dir.charAt(i) == '\\') {
                        tring[i] = "\\\\";
                    } else {
                        temp = str_dir.charAt(i);
                        tring[i] = String.valueOf(temp);
                    }
                }

                for (int i = 0; i < tring.length; i++) {
                    if (tring.equals(null)) {
                        break;
                    } else {
                        ta.append(tring[i]);
                    }
                }
                //   <<<<<<<
                last = ta.getText();
                File path = new File(last + "\\" + fname + "." + imgExt.getSelectedItem());
                try {
                    ImageIO.write(image, imgExt.getSelectedItem().toString(), path);
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
            }
        } 
        else {
            try {
                ImageIO.write(image, imgExt.getSelectedItem().toString(), new File("Pictures\\Image_" + calendar().replace(":", "_") + "." + imgExt.getSelectedItem()));
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
    
    JComboBox jcombox1 = new JComboBox();
    JComboBox jcombox2 = new JComboBox();
    
    private void captureImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureImageButtonActionPerformed

        // when user clickes on (Capture Img)
        String s = "Choose the part of the park:", 
        selected = "";
        Object[] ob = {s, jcombox1};
        String[] items = { "Park1", "Park2", "Park3", "Park4", "Park5", "Park6"};
        int x = 0;
        Icon icon;
        BufferedImage img;

        for (int i = 0; i < 6; i++) {
            jcombox1.addItem(items[i]);
        }
        if (webcam.IS_CAMERA_RUNNING) {
            x = JOptionPane.showConfirmDialog(rootPane, ob, "Capture Image", JOptionPane.OK_CANCEL_OPTION);
            selected = jcombox1.getSelectedItem().toString(); 
            if (x == 0) {
                switch (selected) {
                    case "Park1":
                        saveimage(part1.getIcon());
                        break;
                    case "Park2":
                        saveimage(part2.getIcon());
                        break;
                    case "Park3":
                        saveimage(part3.getIcon());
                        break;
                    case "Park4":
                        saveimage(part4.getIcon());
                        break;
                    case "Park5":
                        saveimage(part5.getIcon());
                        break;
                    case "Park6":
                        saveimage(part6.getIcon());
                        break;
                }
            }
        } 
        else 
            {
                JOptionPane.showMessageDialog(rootPane, "Your camera is turned OFF!", "Error Message", JOptionPane.OK_CANCEL_OPTION);
            }
        
        jcombox1.removeAllItems();
        
    }//GEN-LAST:event_captureImageButtonActionPerformed

    private void Dontp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp1ActionPerformed
        
        if (Dontp1.isSelected()) 
            {
                part1.setIcon(new ImageIcon("none.jpg"));
                park1.setBackground(Color.red);
                TIME_LABEL_1.setForeground(Color.red);
                TIME_LABEL_1.setText("Unknown");
            } 
             else 
                    {
                        park1.setBackground(Color.white);
                        TIME_LABEL_1.setText("");
                    }
    }//GEN-LAST:event_Dontp1ActionPerformed

    private void Dontp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp2ActionPerformed
        if (Dontp2.isSelected()) {
            part2.setIcon(new ImageIcon("none.jpg"));
            park2.setBackground(Color.red);
            TIME_LABEL_2.setForeground(Color.red);
            TIME_LABEL_2.setText("Unknown");
        } else {
            park2.setBackground(Color.white);
            TIME_LABEL_2.setText("");
        }
    }//GEN-LAST:event_Dontp2ActionPerformed

    private void Dontp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp3ActionPerformed
        if (Dontp3.isSelected()) {
            part3.setIcon(new ImageIcon("none.jpg"));
            park3.setBackground(Color.red);
            TIME_LABEL_3.setForeground(Color.red);
            TIME_LABEL_3.setText("Unknown");
        } else {
            park3.setBackground(Color.white);
            TIME_LABEL_3.setText("");
        }
    }//GEN-LAST:event_Dontp3ActionPerformed

    private void Dontp4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp4ActionPerformed
        if (Dontp4.isSelected()) {
            part4.setIcon(new ImageIcon("none.jpg"));
            park4.setBackground(Color.red);
            TIME_LABEL_4.setForeground(Color.red);
            TIME_LABEL_4.setText("Unknown");
        } else {
            park4.setBackground(Color.white);
            TIME_LABEL_4.setText("");
        }
    }//GEN-LAST:event_Dontp4ActionPerformed

    private void Dontp5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp5ActionPerformed
        if (Dontp5.isSelected()) {
            part5.setIcon(new ImageIcon("none.jpg"));
            park5.setBackground(Color.red);
            TIME_LABEL_5.setForeground(Color.red);
            TIME_LABEL_5.setText("Unknown");
        } else {
            park5.setBackground(Color.white);
            TIME_LABEL_5.setText("");
        }
    }//GEN-LAST:event_Dontp5ActionPerformed

    private void Dontp6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dontp6ActionPerformed
        if (Dontp6.isSelected()) {
            part6.setIcon(new ImageIcon("none.jpg"));
            park6.setBackground(Color.red);
            TIME_LABEL_6.setForeground(Color.red);
            TIME_LABEL_6.setText("Unknown");
        } else {
            park6.setBackground(Color.white);
            TIME_LABEL_6.setText("");
        }
    }//GEN-LAST:event_Dontp6ActionPerformed

    private void pupm2i1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pupm2i1ActionPerformed

    }//GEN-LAST:event_pupm2i1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       //// von hier
       try {
            // Set cross-platform Java L&F (also called "Metal")
        UIManager.setLookAndFeel(
            UIManager.getCrossPlatformLookAndFeelClassName());
    } 
    catch (UnsupportedLookAndFeelException e) {
       // handle exception
    }
    catch (ClassNotFoundException e) {
       // handle exception
    }
    catch (InstantiationException e) {
       // handle exception
    }
    catch (IllegalAccessException e) {
       // handle exception
    }
       //bis hier
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Version_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Version_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Version_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Version_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Version_1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem Dontp1;
    private javax.swing.JCheckBoxMenuItem Dontp2;
    private javax.swing.JCheckBoxMenuItem Dontp3;
    private javax.swing.JCheckBoxMenuItem Dontp4;
    private javax.swing.JCheckBoxMenuItem Dontp5;
    private javax.swing.JCheckBoxMenuItem Dontp6;
    private javax.swing.JButton Exit_BTN;
    private javax.swing.JPanel SpaceDetector;
    private javax.swing.JButton Start_and_Stop_BT;
    private javax.swing.JLabel TIME_LABEL_1;
    private javax.swing.JLabel TIME_LABEL_2;
    private javax.swing.JLabel TIME_LABEL_3;
    private javax.swing.JLabel TIME_LABEL_4;
    private javax.swing.JLabel TIME_LABEL_5;
    private javax.swing.JLabel TIME_LABEL_6;
    private javax.swing.JRadioButtonMenuItem askme;
    private javax.swing.JLabel availablPark;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton captureImageButton;
    private javax.swing.JLabel clock;
    private javax.swing.JRadioButtonMenuItem defaultLoc;
    private javax.swing.JMenuItem iExit;
    private javax.swing.ButtonGroup imagesaving;
    private javax.swing.JComboBox imgExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton menimoze;
    private javax.swing.JMenuItem min;
    private javax.swing.JLabel park1;
    private javax.swing.JLabel park2;
    private javax.swing.JLabel park3;
    private javax.swing.JLabel park4;
    private javax.swing.JLabel park5;
    private javax.swing.JLabel park6;
    private javax.swing.JLabel part1;
    private javax.swing.JLabel part2;
    private javax.swing.JLabel part3;
    private javax.swing.JLabel part4;
    private javax.swing.JLabel part5;
    private javax.swing.JLabel part6;
    private javax.swing.JPopupMenu pupm2;
    private javax.swing.JMenuItem pupm2i1;
    // End of variables declaration//GEN-END:variables
}
